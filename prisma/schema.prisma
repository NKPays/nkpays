// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role          Role      @default(USER)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    ADMIN
    USER
}

model ContactQuery {
    id        Int      @id @default(autoincrement())
    name      String
    email     String   @unique
    phone     String?
    message   String?  @db.Text
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

model Product {
    id             Int              @id @default(autoincrement())
    title          String
    desc           String?          @db.Text
    metaDesc       String?          @db.Text
    thumbnail      String?
    info           Json?
    gallery        Json?
    slug           String
    price          String?
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt()
    ProductEnquiry ProductEnquiry[]
}

model ProductEnquiry {
    id        Int      @id @default(autoincrement())
    name      String
    email     String   @unique
    phone     String?
    message   String?  @db.Text
    productId Int
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

model LoginLink {
    id        Int      @id @default(autoincrement())
    title     String
    link      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

model Contact {
    id        Int      @id @default(autoincrement())
    title     String?
    address   Json?
    email     Json?
    phone     Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

model Social {
    id   Int    @id @default(autoincrement())
    site String
    link String
}

model Extension {
    id     Int      @id @default(autoincrement())
    title  String
    data   Json
    active Boolean? @default(true)
}

model Page {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    slug      String?
    content   String?  @db.Text
    meta      Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SiteConfig {
    id       Int   @id @default(autoincrement())
    socials  Json?
    contacts Json?
}

model Plan {
    id        Int      @id @default(autoincrement())
    title     String
    desc      String?
    order     Int      @default(autoincrement())
    price     String?
    schemes   Scheme[]
    enabled   Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    Leads     Leads[]
}

model Scheme {
    id      Int     @id @default(autoincrement())
    name    String
    desc    String?
    price   String?
    order   Int     @default(autoincrement())
    Plan    Plan?   @relation(fields: [planId], references: [id], onDelete: Cascade)
    planId  Int?
    Leads   Leads[]
    enabled Boolean @default(true)
}

model Leads {
    id        Int        @id @default(autoincrement())
    schemeId  Int?
    planId    Int?
    name      String
    email     String
    phone     String?
    shopName  String
    aadhaarNo String
    pancard   String
    address   String?
    pincode   String?
    utrNo     String?
    status    LeadStatus @default(OPEN)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt()
    Scheme    Scheme?    @relation(fields: [schemeId], references: [id])
    Plan      Plan?      @relation(fields: [planId], references: [id])
}

enum LeadStatus {
    OPEN
    CLOSED
    DECLINED
}
